print("inside int5") ;

alias physicalSP S0; //this the physical sp of parent process 
alias sysCallNo S1;
 

//getting the address of physical user SP
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

//since the user has push the sysCall no  onto stack
sysCallNo = [physicalSP-1];

//fork operation  with system call 6
if(sysCallNo == 8)then 
	alias child_pid S3 ;
	alias parentpid S4 ;
	parentpid =  (PTBR - 1024 )/8 ;

	child_pid =  parentpid+1 ;
	//checking the free pcb
	while(child_pid != parentpid )do 
		if([READY_LIST + child_pid *32 +1] == 0 ) then
			print("found freepcb");
			 
			break ;
		endif ;
		child_pid = child_pid +1 ;
	endwhile ;

	//no free pcb 
	if(child_pid == parentpid )then
		print("no free pcb") ;
		[physicalSP-2 ] = -1 ; 
		ireturn ;
	endif ;
	[READY_LIST +child_pid*32  ] = child_pid ;

	alias page_No S5 ;
	page_No = 0 ;

	// while(page_No < 5) do 
	// 	if([PTBR  +1 ] == "01" ) then 
	// 		page_No = page_No +1 ;
	// 	endif ;
	// endwhile ;	

	alias free_m_page S6 ;
	free_m_page = 24 ;
	 

	alias parent_pg_count S8 ;
	parent_pg_count = 0 ;
	alias counter S10 ;
	counter = 0 ; 

	//counting the number of valid pages in the parent process
	while(counter < 4)do 
		if([PAGE_TABLE + parentpid*8 +counter*2] != -1) then
			parent_pg_count = parent_pg_count +1 ;
		endif ;
		counter = counter +1 ;
	endwhile ; 
	 
	alias free_pg_count S11 ;
	free_pg_count = 0 ;

	//counting the number of free pages
	counter = 0 ;
	while(counter < 64 )do 
		if([MEM_LIST+counter]==0)then
			free_pg_count = free_pg_count +1 ;
		endif ; 
		if(free_pg_count>=parent_pg_count)then  //since code greater than 3 pages(no. of pages in parent ) is not required 
			break ;
		endif ;
		counter = counter +1 ; 
	endwhile ;
 

	//if no of  free pages required is not available in the memory 
	if(counter == 64 && free_pg_count < parent_pg_count)then 
		
		[physicalSP-2 ] = -1 ;
		ireturn ;
	endif ;

	counter = 0 ; 
	alias copy_page S12 ;
	copy_page = 0 ;
	//copying the page-table 
	while(counter < 4)do 

		[PAGE_TABLE + child_pid*8 +counter*2] = [PAGE_TABLE + parentpid*8 +counter*2] ;
		[PAGE_TABLE + child_pid*8 +counter*2 +1 ] = [PAGE_TABLE + parentpid*8 +counter*2 +1 ] ;
		counter = counter +1 ;
	endwhile ;
	counter = 0 ;
	alias valid_pg S13 ;
	valid_pg = 0 ;
	alias counter2 S14 ;

	while(parent_pg_count > 0 && counter < 64)do 
		//if the memory is free then allocating this page to child process
		if([MEM_LIST+counter]==0)then 
			[MEM_LIST+counter]=1 ;

			while([PAGE_TABLE + child_pid*8 +valid_pg*2] == -1 && valid_pg < 4 ) do
				
				valid_pg =valid_pg +1 ;
			endwhile ;
			//updating the child page table with the free page in  memory 
			[PAGE_TABLE + child_pid*8 +valid_pg*2 ] = counter ;
			[PAGE_TABLE + child_pid*8 +valid_pg*2+1 ] = "01" ;

			//copying each page to the page allocated to child 
			counter2 = 0 ;
			alias pdata S15 ;
			pdata = [PAGE_TABLE + parentpid*8 +valid_pg*2 ]*512 ;
			
			while(counter2 < 512)do 
				[counter*512 +counter2] = [pdata+counter2] ;
				counter2 = counter2 +1 ;
			endwhile ;
			 
			valid_pg =valid_pg +1 ; //incrementing as data is copied 

			parent_pg_count =parent_pg_count -1 ;
		endif ;
		counter = counter +1  ;
	endwhile ;

	//copying the parent process file table
	counter2 = 15 ;
	while(counter2<31)do 
		[READY_LIST + child_pid*32 + counter2] = [READY_LIST + parentpid *32 +counter2] ;
		counter2 =counter2+1 ;
	endwhile ;

	alias childpcb  S13 ;
	childpcb = READY_LIST + child_pid *32 ;
	[childpcb  ] =child_pid ;
	[childpcb +1 ] = 1 ; //making the child process in ready state 
	[childpcb + 2 ] = BP ;
	[childpcb + 3 ] = SP-1 ; //because it is the child process and in parent process this is removed when it goes back with iret
	[childpcb + 4 ] =[physicalSP] ; //setting the ip with that of parent
	[childpcb + 5 ] =PAGE_TABLE + 8*child_pid ;
	[childpcb + 6 ] = PTLR;
	[childpcb + 7 ]	 = R0 ;
	[childpcb + 8 ]  = R1 ;
	[childpcb + 9 ]	 = R2 ;
	[childpcb + 10 ] = R3 ;
	[childpcb + 11 ] = R4 ;
	[childpcb + 12 ] = R5 ;
	[childpcb + 13 ] = R6 ;
	[childpcb + 14 ] = R7  ;


	alias per_proc_file  S13 ;
	per_proc_file = READY_LIST + 32*child_pid + 15 ;
	 
	counter  = 0 ;
	alias file_table_i S14 ;
	while(counter < 8 ) do 
		if([per_proc_file + counter ]!=-1)then
			file_table_i =  [per_proc_file + counter ] ;
			[FILE_TABLE + file_table_i *2 +1 ] = [FILE_TABLE + file_table_i *2 + 1 ] + 1 ;

		endif ;
		counter = counter  + 2 ;
	endwhile ;
	
	
	parentpid =  (PTBR - 1024 )/8 ;
	//setting parent pid  for child proc
	[ READY_LIST +32 * child_pid +31] =parentpid ;

	[physicalSP-2] = child_pid ; //setting the return value of the current process as pid of child process
	
	[[1024 + 8*child_pid + 2 * (SP-1) / 512] * 512 + (SP-1) % 512 - 1] = -2; 

	ireturn ;
	

endif ;







